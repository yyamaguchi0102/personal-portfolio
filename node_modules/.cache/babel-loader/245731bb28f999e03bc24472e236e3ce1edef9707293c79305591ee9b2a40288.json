{"ast":null,"code":"import { GroupPlaybackControls } from '../GroupPlaybackControls.mjs';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\nfunction isSequence(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\nfunction createScopedAnimate(scope) {\n  /**\n   * Implementation\n   */\n  function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n    let animations = [];\n    if (isSequence(subjectOrSequence)) {\n      animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n    } else {\n      animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\n    }\n    const animation = new GroupPlaybackControls(animations);\n    if (scope) {\n      scope.animations.push(animation);\n    }\n    return animation;\n  }\n  return scopedAnimate;\n}\nconst animate = createScopedAnimate();\nexport { animate, createScopedAnimate };","map":{"version":3,"names":["GroupPlaybackControls","animateSequence","animateSubject","isSequence","value","Array","isArray","createScopedAnimate","scope","scopedAnimate","subjectOrSequence","optionsOrKeyframes","options","animations","animation","push","animate"],"sources":["/Users/yutakayamaguchi/Documents/Cursor/personalwebsite/personal-portfolio/node_modules/framer-motion/dist/es/animation/animate/index.mjs"],"sourcesContent":["import { GroupPlaybackControls } from '../GroupPlaybackControls.mjs';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction isSequence(value) {\n    return Array.isArray(value) && Array.isArray(value[0]);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\nfunction createScopedAnimate(scope) {\n    /**\n     * Implementation\n     */\n    function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n        let animations = [];\n        if (isSequence(subjectOrSequence)) {\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n        }\n        else {\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\n        }\n        const animation = new GroupPlaybackControls(animations);\n        if (scope) {\n            scope.animations.push(animation);\n        }\n        return animation;\n    }\n    return scopedAnimate;\n}\nconst animate = createScopedAnimate();\n\nexport { animate, createScopedAnimate };\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,cAAc,QAAQ,eAAe;AAE9C,SAASC,UAAUA,CAACC,KAAK,EAAE;EACvB,OAAOC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA,SAASG,mBAAmBA,CAACC,KAAK,EAAE;EAChC;AACJ;AACA;EACI,SAASC,aAAaA,CAACC,iBAAiB,EAAEC,kBAAkB,EAAEC,OAAO,EAAE;IACnE,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIV,UAAU,CAACO,iBAAiB,CAAC,EAAE;MAC/BG,UAAU,GAAGZ,eAAe,CAACS,iBAAiB,EAAEC,kBAAkB,EAAEH,KAAK,CAAC;IAC9E,CAAC,MACI;MACDK,UAAU,GAAGX,cAAc,CAACQ,iBAAiB,EAAEC,kBAAkB,EAAEC,OAAO,EAAEJ,KAAK,CAAC;IACtF;IACA,MAAMM,SAAS,GAAG,IAAId,qBAAqB,CAACa,UAAU,CAAC;IACvD,IAAIL,KAAK,EAAE;MACPA,KAAK,CAACK,UAAU,CAACE,IAAI,CAACD,SAAS,CAAC;IACpC;IACA,OAAOA,SAAS;EACpB;EACA,OAAOL,aAAa;AACxB;AACA,MAAMO,OAAO,GAAGT,mBAAmB,CAAC,CAAC;AAErC,SAASS,OAAO,EAAET,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}